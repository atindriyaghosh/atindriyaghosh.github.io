<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[Atindriya Ghosh]]></title><description><![CDATA[Hi, I'm Atin and welcome to my blog! I primarily write about things I learn in my day job as a Java developer. Feel free to look around and share your thoughts.]]></description><link>https://www.atindriyaghosh.com/</link><generator>Ghost 0.5</generator><lastBuildDate>Sun, 03 May 2015 12:40:04 GMT</lastBuildDate><atom:link href="https://www.atindriyaghosh.com/rss/" rel="self" type="application/rss+xml"/><ttl>60</ttl><item><title><![CDATA[Introduction To The Actor Model]]></title><description><![CDATA[<p>Recently, I discovered a new concurrency model known as the Actor Model. This post provides a brief introduction to it.</p>

<h1 id="concurrencyparallelism">Concurrency &amp; Parallelism</h1>

<p>Before I dive into the Actor Model, let me briefly touch upon the concepts of concurrency and parallelism. </p>

<p>There is a lot of debate about the exact definitions of these terms. For the purposes of this article, I am going to use the below definitions. Also I am going to use the term 'process' a lot. Here, the term 'process' is not an OS-level process but a more general concept i.e. some abstract computation.</p>

<ol>
<li><p><strong>Concurrency</strong> - Concurrency is a property of an application or a system in which two or more processes are making progress during a specific time period. While all (or a subset) of these processes could execute simultaneously, this is neither guaranteed nor necessary for concurrency. </p></li>
<li><p><strong>Parallelism</strong> - Parallelism is a condition in which two or more processes are executing simultaneously.</p></li>
</ol>

<p>Thus, concurrency is an application or system attribute while parallelism is more  a runtime behavior. </p>

<p>Several processes in a concurrent application or system could run in parallel or a single process could have several sub-processes which run in parallel. But, parallelism is <em>not</em> an inherent attribute of concurrent applications or systems.</p>

<h2 id="concurrencytypes">Concurrency Types</h2>

<p>I just want to talk about one last thing, before I go into the Actor Model, namely, the types of concurrency. Concurrency can be broadly divided into 2 types depending on how processes interact with each other. </p>

<ol>
<li><p><strong>Shared-state Concurrency</strong> - This mainly involves multiple processes  communicating with each other by accessing some mutable data which requires co-ordination using tools such as locks, synchronized blocks, mutexes, semaphores etc. This is usually used in concurrent <em>applications</em></p></li>
<li><p><strong>Message-passing</strong> - This mainly involves multiple processes communicating with each other using messages. Thus, since there is no shared state between processes, the need for locks etc is mitigated. This is usually used in concurrent <em>systems</em>.</p></li>
</ol>

<p>The Actor Model belongs to the Message-passing type of concurrency.</p>

<h1 id="actormodel">Actor Model</h1>

<p>Though I only recently discovered it, the Actor Model has been in existence since the 1970s. The basic concept behind it is surprisingly intuitive.</p>

<p>The easiest way to understand it by using the metaphor of Email systems. </p>

<h2 id="emailsystemmetaphor">Email System Metaphor</h2>

<p>Take a scenario where you want one of your co-workers to create a Powerpoint presentation. You would send her an email informing her that you need a presentation made on some topic. Once she has finished making the presentation, she will send you an email back saying that she has done it. Additionally, the email will contain the presentation as an attachment.</p>

<p><img src="https://www.atindriyaghosh.com/content/images/2015/05/Actor-Model---Single-Process.jpg" alt="Actor Model - Single Process"></p>

<p>If the presentation is large and has to be made on a tight schedule, you might as k multiple co-workers to make slides for specific sections which you would later combine.</p>

<p><img src="https://www.atindriyaghosh.com/content/images/2015/05/Actor-Model-Multiple-Processes.jpg" alt="Actor Model - Multiple Process"></p>

<p>This is the Actor Model in its simplest form. </p>

<h2 id="terminology">Terminology</h2>

<p>In the Actor Model terminology, you and your co-workers are <strong>Actors</strong> and the emails that you exchange are <strong>messages</strong>. These messages are immutable i.e. they cannot be modified. The organization that you and your co-workers belong to are an <strong>Actor System</strong>. You can have Actors from different Actor Systems sending each other messages just like people from different organizations can send each other emails. Each Actor is identified by an address relative to the Actor System to which it belongs. </p>

<p>Each Actor has its own <strong>mailbox</strong>, where messages are queued. Each Actor reads the messages in its mailbox in order. Depending on the message, the Actor can execute some process, forward the message to another Actor, reply back to the sender or simply ignore the message. </p>

<p>Message passing in the Actor Model is asynchronous in nature. Just like you can send an email to a co-worker and work on something else until she replies, so can an Actor.</p>

<h2 id="advantages">Advantages</h2>

<p>The greatest advantage of the Actor Model is that it provides a higher level of abstraction over such primitives such as threads, locks etc. It is much easier to model a problem domain using the paradigm of the Actor Model, since it mimics our daily life. </p>

<p>Additionally, due to the inherent immutability of messages the challenges of shared state is mitigated, greatly reducing the occurrence of concurrency problems such as race conditions and deadlocks. </p>

<p>Another added advantage is that of asynchronous message passing. This allows each individual actor to work on some other process without having to block while it waits for some other actor to finish processing. Thus, this increases the throughput of the application or system as a whole.</p>

<h1 id="popularimplementations">Popular Implementations</h1>

<p>Some of the popular implementations of the Actor Model are given below</p>

<ol>
<li><p><a href="http://akka.io/" title="Akka">Akka</a> - Arguably the most popular implementation of the Actor Model. This framework mainly targets the JVM and can be used by the Java &amp; Scala programming languages. There exist various ports for other runtime environment like Akka.NET for the .NET framework. It is used by projects like Apache Spark, Play Framework, Coursera among others</p></li>
<li><p><a href="http://www.erlang.org/" title="Erlang">Erlang</a> - The concurrency implementation used in the Erlang programming language is based on the Actor Model. Projects including CouchDB, Riak and RabbitMQ are written primarily in Erlang</p></li>
<li><p><a href="http://dotnet.github.io/orleans/" title="Project Orleans">Project Orleans</a> - An implementation by Microsoft Research designed primarily for cloud applications. It is famously used as the platform for all cloud services of the XBox game Halo 4</p></li>
</ol>

<h1 id="conclusion">Conclusion</h1>

<p>I hope the above post gives a brief overview of the Actor Model. Considering the current trend towards increasingly concurrent applications and systems, this model adds a new tool that can be added to our concurrency toolbox. I hope to expand on this post as my own understanding of the possibilities and limitations of this model increases.</p>

<h1 id="references">References</h1>

<ol>
<li><a href="http://www.amazon.com/Akka-Concurrency-Derek-Wyatt/dp/0981531660" title="Akka Concurrency - Derek Wyatt">Akka Concurrency - Derek Wyatt</a>  </li>
<li><a href="http://en.wikipedia.org/wiki/Actor_model" title="Actor Model - Wikipedia">Actor Model - Wikipedia</a></li>
</ol>]]></description><link>https://www.atindriyaghosh.com/introduction-to-the-actor-model/</link><guid isPermaLink="false">6becd3bd-a25f-4ae7-8557-b01a77fb2264</guid><dc:creator><![CDATA[Atindriya Ghosh]]></dc:creator><pubDate>Sun, 03 May 2015 12:37:11 GMT</pubDate></item><item><title><![CDATA[How To Capture Clickstream Data (Part 2)]]></title><description><![CDATA[<p>Today, I'm going to demonstrate a more complex example for capturing clickstream data. </p>

<h2 id="capturingclickstreamdatafromablog">Capturing Clickstream Data From a Blog</h2>

<p>In my previous post, I captured a <em>pageView</em> event from a single page. If you haven't read that post yet, you can find it <a href="https://www.atindriyaghosh.com/how-to-capture-clickstream-data-part-1/">here</a>.</p>

<p>Today, I'm going to take this a step further by capturing 3 types of click events from a simple blog. </p>

<p>The code is implemented in Python and JavaScript with some HTML and CSS used for styling the sample blog. The entire source code can be found on <a href="https://github.com/atindriyaghosh/Clickstream-Data-Ingestion/tree/master/clickstream-data-capture/part-2">GitHub</a>. </p>

<h3 id="clickevents">Click Events</h3>

<p>The click events that will be captured are</p>

<ol>
<li><em>pageView</em> event - Similar to the last post, it is generated whenever a relevant page is loaded.  </li>
<li><em>search</em> event - This event is generated whenever a visitor uses the search box feature of the blog  </li>
<li><em>signup</em> event - Whenever a visitor signs up for the newsletter, it results in a <em>signup</em> event.</li>
</ol>

<p>Each event will have a set of common attributes, namely</p>

<ul>
<li>Event Id - Unique Event Identifier (Defined by a V1 UUID)</li>
<li>User Id - Unique User Identifier (Defined by a V4 UUID)</li>
<li>Page Name - The name of the page that is viewed</li>
<li>Action - Event Type (pageview, search or signup)</li>
<li>Server Time - Time at which the server received the event (Stored in the format yyyy-MM-ddThh:mm:ss)</li>
</ul>

<p>Apart from these we will have some event specific attributes as  well</p>

<ol>
<li><em>search</em> event <br>
<ul><li>searchTerm - This is the term that the visitor searched for</li></ul></li>
<li><em>signup</em> event <br>
<ul><li>name - The visitor's name</li>
<li>email - His/Her email id</li></ul></li>
</ol>

<h3 id="trackingpixels">Tracking Pixels</h3>

<p>Now there will be 3 different tracking pixels generated for each of these events.</p>

<p>All the three tracking pixels will be created by the <code>onload</code> event of the <code>&lt;body&gt;</code> tag calling a JavaScript method. </p>

<p>Since the JS code for a <em>pageView</em> event is similar to the previous post I'm not going to include it here.</p>

<p>For a <em>search</em> event, the JS code looks something like this</p>

<pre><code>function captureSearchTermEvent() {
    var path = window.location.pathname;
    var page = path.split("/").pop();

    // Gets the serch term from the query parameters
    var searchTerm = getSearchTerm(window.location.search.substring(1));
    var img = new Image(1, 1);
    var queryParams = "pageName=" + page + "&amp;action=search&amp;searchTerm=" + searchTerm;
    img.src = "http://localhost:9000/_.gif?" + queryParams;
    document.getElementById("trackingPixel").appendChild(img);
}
</code></pre>

<p>This will generate an <code>&lt;img&gt;</code> with the following <code>src</code> attribute</p>

<pre><code>http://localhost:9000/_.gif?pageName=search&amp;action=search&amp;searchTerm=test+search+term
</code></pre>

<p>The JS method for a <em>signup</em> event is </p>

<pre><code>function captureSignUpEvent() {
    var path = window.location.pathname;
    var page = path.split("/").pop();

    // Gets the name and email from the query parameters
    var map = getNameAndEmail(window.location.search.substring(1));
    var img = new Image(1, 1);
    var queryParams = "pageName=" + page + "&amp;action=signup&amp;name=" + map["name"] + "&amp;email=" + map["email"];
    img.src = "http://localhost:9000/_.gif?" + queryParams;
    document.getElementById("trackingPixel").appendChild(img);
}
</code></pre>

<p>and will generate an <code>&lt;img&gt;</code> with the <code>src</code></p>

<pre><code>http://localhost:9000/_.gif?pageName=signup&amp;action=signup&amp;name=John+Doe&amp;email=john%40doe.com
</code></pre>

<h3 id="restfulwebservice">RESTful Web Service</h3>

<p>The web service will capture the click event and log it to a file on the web server. The raw click events will be in the following format</p>

<pre><code>event_id=f6be8dc8-ff78-11e3-8914-0a8e4d5da239|user_id=fd07b3be-d3fa-4b12-8c71-3f4a3b71d9d0|page_name=home|action=pageView|server_time=2014-06-29T10:34:35

event_id=401c7d26-ff7f-11e3-ac38-0a8e4d5da239|user_id=fd07b3be-d3fa-4b12-8c71-3f4a3b71d9d0|page_name=search|action=search|server_time=2014-06-29T11:19:35|searchTerm=test search term

event_id=ecbd8506-ff80-11e3-ac38-0a8e4d5da239|user_id=fd07b3be-d3fa-4b12-8c71-3f4a3b71d9d0|page_name=signup|action=signup|server_time=2014-06-29T11:31:34|email=john@doe.com|name=John Doe
</code></pre>

<p>If you want to try out the sample code, please feel free to get the full source code on <a href="https://github.com/atindriyaghosh/Clickstream-Data-Ingestion/tree/master/clickstream-data-capture/part-2">GitHub</a>. </p>

<p>This code implementation is mostly for demonstration purposes so it doesn't have much processing code. For example, the search box doesn't implement any search functionality and only returns a static page. Similarly, the signup form doesn't persist the signup details in a DB. But, it allow you to understand the how the click events are actually captured and stored in  log file.  </p>

<h2 id="conclusion">Conclusion</h2>

<p>Now that we have captured some data the next step would be to ingest this data some place where we can draw some insights from it. In future posts, I will show simple ways in which we can accomplish this. </p>]]></description><link>https://www.atindriyaghosh.com/how-to-capture-clickstream-data-part-2/</link><guid isPermaLink="false">cf6f1cef-4dbb-4691-ae6a-4124579211cd</guid><category><![CDATA[Clickstream Data]]></category><category><![CDATA[Tracking Pixel]]></category><category><![CDATA[Python]]></category><category><![CDATA[JavaScript]]></category><dc:creator><![CDATA[Atindriya Ghosh]]></dc:creator><pubDate>Sun, 29 Jun 2014 12:00:00 GMT</pubDate></item><item><title><![CDATA[How To Capture Clickstream Data (Part 1)]]></title><description><![CDATA[<p>In this post, I will explain what is clickstream data, how we capture it and provide a simple implementation.</p>

<h2 id="whatisclickstreamdata">What is Clickstream Data?</h2>

<p>Clickstream data is the stream of mouse clicks made by the users of your website. This data helps you in identifying how users engage with your site. </p>

<p>For example, on an e-commerce site you can figure out which is the product page that garners the most views. </p>

<p>In today's internet, you would be hard-pressed to find websites that don't capture clickstream data to some degree. In fact, this technique is not just limited to websites, it could also be extended to any web-based property such as emails etc.</p>

<h2 id="howdowecaptureit">How do we capture it?</h2>

<p>The process of capturing clickstream data follows a simple flow - </p>

<ol>
<li>There is a light-weight tracking mechanism embedded in the HTML code  </li>
<li>This mechanism makes calls to a web service that is responsible for actually capturing the click data</li>
</ol>

<h3 id="trackingpixel">Tracking Pixel</h3>

<p>The tracking pixel is the industry standard when it comes to tracking click data. It consists of a 1x1 pixel i.e. an <code>&lt;img&gt;</code> tag whose source is the endpoint of the web service that will capture the click data.</p>

<p>A simple example </p>

<pre><code>&lt;img width="1" height="1" src="http://webservice.com/"&gt;
</code></pre>

<p>Thus, all the website designer has to do is create this <code>&lt;img&gt;</code> tag using either HTML or JavaScript and the web service defined will be called when the page loads.</p>

<h3 id="webservice">Web Service</h3>

<p>The web service is a very simple RESTful web service, whose job it is to receive the request from the front-end and parse all the necessary data. Usually, most of the required data is passed to this RESTful service in the form of query parameters. But, some information like a unique user identifier can be captured from the cookie as well.</p>

<h2 id="simpleimplementation">Simple Implementation</h2>

<p>The rest of this post will focus on demonstrating a simple implementation of the Tracking Pixel and the RESTful web service required to capture clickstream data. The following code is written using basic Python and JavaScript. The complete source code can be found on <a href="https://github.com/atindriyaghosh/Clickstream-Data-Ingestion/tree/master/clickstream-data-capture/part-1">GitHub</a>. </p>

<h3 id="clickevent">Click Event</h3>

<p>Each instance of a click is known as a click event. Now, depending on your use case these events can be categorized into diferent types. </p>

<p>For instance, we could have a <em>pageView</em> event when a web page is loaded. We could have a <em>link</em> event when a user clicks on a particular link on the page. In an e-commerce site there could be a <em>purchase</em> event or an <em>addToCart</em> event. </p>

<p>Now, each click event consists of some attributes like eventId, action etc. These attributes give specific information about the type of event they constitute. For instance, in the e-commerce example, we might be interested in the order_id in a <em>purchase</em> event but not in a <em>pageView</em> event. </p>

<p>But, while each click event type will have sets of different attributes, there will be some common attributes between them. An example being eventId. Each event will have a unique identifier associated with it. </p>

<p>For the purposes of this post, I have made the following assumptions</p>

<ol>
<li>There is only one type of event - <em>pageview</em> event  </li>
<li>Each <em>pageView</em> event will have the following attributes - <br>
<ul><li>Event Id - Unique Event Identifier (Defined by a V1 UUID)</li>
<li>User Id - Unique User Identifier (Defined by a V4 UUID)</li>
<li>Page Name - The name of the page that is viewed (Currently, there is only 1 page)</li>
<li>Action - Event Type (pageview by default)</li>
<li>Server Time - Time at which the server received the event (Stored in the format yyyy-MM-ddThh:mm:ss)</li></ul></li>
</ol>

<h3 id="trackingpixel">Tracking Pixel</h3>

<p>In this implementation, the <code>onload</code> event of the <code>&lt;body&gt;</code> tag will call a JavaScript method that will generate the Tracking Pixel. </p>

<p>The JavaScript method will perform the following steps</p>

<ol>
<li>Get the name of the page  </li>
<li>Create an <code>&lt;img&gt;</code> tag with dimensions 1x1 with the src set to the web service endpoint with additional query parameters</li>
</ol>

<p>Javascript code for the Tracking Pixel is</p>

<pre><code>function hitTrackingPixel() {
        var path = window.location.pathname;
        var page = path.split("/").pop();
        var img = new Image(1, 1);
        var queryParams = 'pageName=' + page + '&amp;action=pageView'
        img.src = 'http://localhost:9000/_.gif?' + queryParams;
        document.body.insertAfter(img, document.body.firstChild);
    }
</code></pre>

<p>The above JavaScript code will create an <code>&lt;img&gt;</code> tag with the following src attribute</p>

<pre><code>http://localhost:9000/_.gif?pageName=/&amp;action=pageView
</code></pre>

<h3 id="restfulwebservice">RESTful Web Service</h3>

<p>This service will have endpoints with the following behaviors</p>

<ol>
<li>Return the webpage (It will also check if the requesting client has a user_id set in the cookie. If not, it will generate one and set the cookie with the value)  </li>
<li><p>Capture the Click Event and log it in a file on the server. The format of the logged event will be</p>

<pre><code>event_id=&lt;event id&gt;|user_id=&lt;user id&gt;|page_name=/|action=pageView|server_time=&lt;server time&gt;
</code></pre></li>
</ol>

<p>For the purposes of this post, I have implemented a simple HTTPServer in Python. I am not going to post the entire code here, but just a portion of it.</p>

<pre><code>class TrackingPixelHandler(BaseHTTPRequestHandler): 
    def do_GET(self):
        parsed_path = urlparse.urlparse(self.path)
        path = parsed_path.path

        if(path == '/_.gif'):
            ## Capture the event and log it to the server filesystem

        if(path == ''):
            ## Serve the page /

## Start the server
if __name__ == '__main__':    
    server = HTTPServer(('', 9000), TrackingPixelHandler)
    print 'Starting server, use &lt;Ctrl-C&gt; to stop'
    server.serve_forever()
</code></pre>

<p>As mentioned earlier, the full code for the Python HTTPServer and the Tracking Pixel JavaScript code can be found on <a href="https://github.com/atindriyaghosh/Clickstream-Event-Ingestion">GitHub</a></p>

<h2 id="conclusion">Conclusion</h2>

<p>Let's quickly review the concepts introduced in this post. </p>

<ol>
<li>Clickstream data helps identify how users interact with a web-based property.  </li>
<li>We can capture this data using tracking pixels  </li>
<li>Tracking pixels are merely <code>&lt;img&gt;</code> tags embedded in a html page whose src is set to a web service that actually captures the data  </li>
<li>Finally, we saw a simple implementation of how to capture clickstream data</li>
</ol>

<p>In future posts, I will try to iterate on this implementations to capture more data.</p>]]></description><link>https://www.atindriyaghosh.com/how-to-capture-clickstream-data-part-1/</link><guid isPermaLink="false">a3886f98-f0c2-490e-a4d4-5a1b8f45dd55</guid><category><![CDATA[Clickstream Data]]></category><category><![CDATA[Tracking Pixel]]></category><category><![CDATA[Python]]></category><category><![CDATA[JavaScript]]></category><dc:creator><![CDATA[Atindriya Ghosh]]></dc:creator><pubDate>Tue, 10 Jun 2014 16:33:00 GMT</pubDate></item></channel></rss>